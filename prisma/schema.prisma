generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Event {
  id          String    @id @default(cuid())
  name        String
  description String?
  startDate   DateTime?
  endDate     DateTime?
  isActive    Boolean   @default(true)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  // Relations
  tickets     Ticket[]
  eventUsers  EventUser[]
  scanHistory ScanHistory[]
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  createdAt DateTime @default(now())
  name      String
  role      UserRole @default(ENTRY)

  // Relation many-to-many avec Event via EventUser
  eventUsers EventUser[]

  // Relation avec les scans effectués par cet utilisateur
  scans ScanHistory[] @relation("UserScans")
}

// Table de jointure pour la relation many-to-many entre User et Event
model EventUser {
  id      String @id @default(cuid())
  userId  String
  eventId String
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([userId, eventId])
}

model Ticket {
  id          String        @id @default(cuid())
  number      String        @unique
  status      Status        @default(PENDING)
  ticketType  TicketType    @default(NORMAL)
  scannedAt   DateTime?
  soldAt      DateTime?
  entryType   EntryType?
  createdAt   DateTime      @default(now())
  
  // Relation avec Event
  eventId     String
  event       Event         @relation(fields: [eventId], references: [id])
  
  scanHistory ScanHistory[]
}

model ScanHistory {
  id        String   @id @default(cuid())
  ticketId  String
  action    Action
  scannedAt DateTime @default(now())

  // Relations
  ticket  Ticket @relation(fields: [ticketId], references: [id])
  eventId String
  event   Event  @relation(fields: [eventId], references: [id])

  // Optionnel : l'utilisateur qui a effectué l'action (vendeur, contrôleur, etc.)
  vendeurId String?
  vendeur   User?   @relation("UserScans", fields: [vendeurId], references: [id])
}

enum Status {
  PENDING
  ENTERED
  EXITED
  MANUAL
  VENDU
}

enum TicketType {
  NORMAL
  VIP
  ARTISTE
  STAFF
}

enum EntryType {
  SCAN
  MANUAL
}

enum Action {
  ENTER
  EXIT
  SOLD
}

enum UserRole {
  ADMIN
  ENTRY
  EXIT
  REENTRY
  VENDEUR
}
